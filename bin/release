#!/usr/bin/env bash
#
# Build & Release a new version of the theme on Ruby Gems
#
# For a new major/minor version, bump the version on the master branch, and then merge into production branch
#
# For a patch version, bump the version number on the patch branch, then merge that branch into the master and production branches
#
# Usage: run on master branch or the patch branch
#
# Requires: git, npm & RubyGems

set -eu

THEME_NAME="redeyed-jekyll-theme"

opt_pre=false # preview mode option

working_branch="$(git branch --show-current)"

STAGING_BRANCH="$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')"

PROD_BRANCH="master"

GEM_SPEC="$THEME_NAME.gemspec"

NODE_CONFIG="package.json"

FILES=(
    "_javascript/copyright"
    "_sass/redeyed-jekyll-theme.scss"
    "COPYRIGHT"
    "README.md"
    "$GEM_SPEC"
    "$NODE_CONFIG"
)

TOOLS=(
    "git"
    "npm"
    "standard-version"
    "gem"
)

help() {
    echo "A tool to release a new RedEyed Theme Gem"
    echo
    echo "Usage:"
    echo
    echo "Options:"
    echo "      -p, --preview           Enable preview mode - branches will not be modified"
    echo "      -h, --help              Print this information"
}

_check_git() {
    if [[ -n $(git status . -s) ]]; then
        echo "Abort: Commit the staged files first, then run this command again"
        exit 1
    fi

    if [[ $working_branch != "$STAGING_BRANCH" && $working_branch != hotfix/* ]]; then
        echo "Abort: Please run on the master branch or patch branches"
        exit 1
    fi
}

_check_src() {
    if [[ ! -f $1 && ! -d $1 ]]; then
        echo -e "ERROR: Missing File \"$1\"!\n"
        exit 1
    fi
}

_check_command() {
    if ! command -v "$1" &>/dev/null; then
        echo "Command '$1' not found"
        exit 1
    fi
}

_check_node_packages() {
    if [[ ! -d node_modules || "$(du node_modules | awk '{print $1}')" == "0" ]]; then
        npm i
    fi
}

check() {
    _check_git

    for i in "${!FILES[@]}"; do
        _check_src "${FILES[$i]}"
    done

    for i in "${!TOOLS[@]}"; do
        _check_command "${TOOLS[$i]}"
    done

    _check_node_packages
}

_bump_file() {
    for i in "${!FILES[@]}"; do
        sed -i "s/v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+/v$1/" "${FILES[$i]}"
    done

    npx gulp
}

_bump_gemspec() {
    sed -i "s/[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+/$1/" "$GEM_SPEC"
}

# 1. Bump latest version number to the following files:
#
#   - _sass/redeyed-jekyll-theme.scss
#   - COPYRIGHT
#   - assets/js/dist/*.js (built by gulp later)
#   - redeyed-jekyll-theme.gemspec
#
# 2. Commit to save changes
bump() {
    _bump_file "$1"
    _bump_gemspec "$1"

    if [[ $opt_pre = false && -n $(git status . -s) ]]; then
        git add .
        git commit -m "chore(release): $1"
    fi
}

# remove unnecessary theme settings
cleanup_config() {
    cp _config.yml _config.yml.bak
    sed -i "s/^img_cdn:.*/img_cdn:/;s/^avatar:.*/avatar:/" _config.yml
}

resume_config() {
    mv _config.yml.bak _config.yml
}

# auto-generate a new version number
standard_version() {
    if $opt_pre; then
        standard-version --prerelease rc
    else
        standard-version
    fi
}

# prevent changelogs generated on master branch from having duplicate entries
# (another bug in standard-version)
standard_version_plus() {
    temp_branch="master-mirror"
    temp_dir="$(mktemp -d)"

    git checkout -b "$temp_branch" "$PROD_BRANCH"
    git merge --no-ff --no-edit "$STAGING_BRANCH"

    standard_version

    cp package.json CHANGELOG.md "$temp_dir"

    git checkout "$STAGING_BRANCH"
    git reset --hard HEAD   # undo changes from $temp_branch
    mv "$temp_dir"/* .      # rewrite the changelog

    # clean up the temp stuff
    rm -rf "$temp_dir"
    git branch -D "$temp_branch"
}

# build a gem package
build_gem() {
    echo -e "Build the gem package for v$_version\n"
    cleanup_config
    rm -f ./*.gem
    gem build "$GEM_SPEC"
    resume_config
    gem push "$THEME_NAME-$_version.gem"
    mv "$THEME_NAME-$_version.gem" .releases/.
}

# update the git branch graph, tag, then build the gem package
release() {
    _version="$1" # X.Y.Z

    git checkout "$PROD_BRANCH"
    git merge --no-ff --no-edit "$working_branch"

    # create a new tag on production branch
    echo -e "Create tag v$_version\n"
    git tag "v$_version"

    # merge from patch branch to the staging branch
    # NOTE: This may break if conflicted and may require manual intervention
    if [[ $working_branch == hotfix/* ]]; then
        git checkout "$STAGING_BRANCH"
        git merge --no-ff --no-edit "$working_branch"
        git branch -D "$working_branch"
    fi
}

main() {
    check

    if [[ "$working_branch" == "$STAGING_BRANCH" ]]; then
        standard_version_plus
    else
        standard_version
    fi

    # change heading of patch version to level 2 (a bug from `standard-version`)
    sed -i "s/^### \[/## \[/g" CHANGELOG.md

    _version="$(grep '"version":' package.json | sed 's/.*: "//;s/".*//')"

    echo -e "Bump version number to $_version\n"
    bump "$_version"

    build_gem

    if [[ $opt_pre = true ]]; then
        # undo all changes on git
        git reset --hard && git clean -fd
    else
        release "$_version"
    fi
}

while (($#)); do
    opt="$1"
    case $opt in
        -p | --preview)
            opt_pre=true
            shift
            ;;
        -h | --help)
            help
            exit 0
            ;;
        *)
            help
            exit 1
            ;;
    esac
done

main
